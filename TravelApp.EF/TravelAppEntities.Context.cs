//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TravelApp.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TravelAppEntities : DbContext
    {
        public TravelAppEntities()
            : base("name=TravelAppEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<TravelRequest> TravelRequests { get; set; }
    
        public virtual ObjectResult<Nullable<int>> AddTravelRequest(string name, Nullable<int> pickupPlace, Nullable<int> destinationPlace, Nullable<System.DateTime> travelDateTime, string emailAddress, ObjectParameter id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var pickupPlaceParameter = pickupPlace.HasValue ?
                new ObjectParameter("PickupPlace", pickupPlace) :
                new ObjectParameter("PickupPlace", typeof(int));
    
            var destinationPlaceParameter = destinationPlace.HasValue ?
                new ObjectParameter("DestinationPlace", destinationPlace) :
                new ObjectParameter("DestinationPlace", typeof(int));
    
            var travelDateTimeParameter = travelDateTime.HasValue ?
                new ObjectParameter("TravelDateTime", travelDateTime) :
                new ObjectParameter("TravelDateTime", typeof(System.DateTime));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddTravelRequest", nameParameter, pickupPlaceParameter, destinationPlaceParameter, travelDateTimeParameter, emailAddressParameter, id);
        }
    
        public virtual int DeleteTravelRequest(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTravelRequest", idParameter);
        }
    
        public virtual int UpdateTravelRequest(string name, Nullable<int> pickupPlace, Nullable<int> destinationPlace, Nullable<System.DateTime> travelDateTime, string emailAddress, Nullable<int> id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var pickupPlaceParameter = pickupPlace.HasValue ?
                new ObjectParameter("PickupPlace", pickupPlace) :
                new ObjectParameter("PickupPlace", typeof(int));
    
            var destinationPlaceParameter = destinationPlace.HasValue ?
                new ObjectParameter("DestinationPlace", destinationPlace) :
                new ObjectParameter("DestinationPlace", typeof(int));
    
            var travelDateTimeParameter = travelDateTime.HasValue ?
                new ObjectParameter("TravelDateTime", travelDateTime) :
                new ObjectParameter("TravelDateTime", typeof(System.DateTime));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTravelRequest", nameParameter, pickupPlaceParameter, destinationPlaceParameter, travelDateTimeParameter, emailAddressParameter, idParameter);
        }
    }
}
